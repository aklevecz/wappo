{"version":3,"sources":["Context.js","D3.js","App.js","serviceWorker.js","index.js"],"names":["server","WordContext","React","createContext","getWords","a","fetch","response","json","data","socket","io","path","transport","voteReducer","state","action","type","word","vote","newState","wordReducer","words","WordProvider","children","useReducer","wordz","dispatchWord","votez","dispatchVote","useEffect","on","isNew","then","votes","allWords","map","w","close","Provider","value","D3","Object","keys","length","console","log","d3","domain","range","nodes","d","name","radius","simulation","force","strength","width","height","c","attr","x","y","t","call","subject","find","active","alphaTarget","restart","fx","fy","n","selectAll","enter","append","style","text","remove","Colors","mood","object","sensibility","Container","styled","div","props","color","CatContainer","CatButton","MoodS","ObjectS","SenseS","App","useContext","useState","setColor","setWord","changeColor","e","target","innerHTML","onClick","key","emit","voteWord","onChange","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf44cb6a.chunk.js","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nexport const WordContext = React.createContext();\r\n\r\nlet server = \"http://localhost:4400\";\r\nserver = \"https://eng.med--lab.org\";\r\nconst getWords = async () => {\r\n  const response = await fetch(`${server}/words/`);\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\n// const socket = io(server);\r\nconst socket = io(server, { path: \"/socket.io\", transport: [\"websocket\"] });\r\n\r\nconst voteReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      const {\r\n        word: { word, vote }\r\n      } = action;\r\n      return { ...state, [word]: vote };\r\n    case \"init\":\r\n      return action.newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst wordReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"init\":\r\n      return action.words;\r\n    case \"ADD_WORD\":\r\n      return [...state, action.word.word];\r\n  }\r\n};\r\n\r\nconst WordProvider = ({ children }) => {\r\n  const [wordz, dispatchWord] = useReducer(wordReducer, []);\r\n  const [votez, dispatchVote] = useReducer(voteReducer, {});\r\n\r\n  useEffect(() => {\r\n    socket.on(\"updateword\", word => {\r\n      if (word.isNew) dispatchWord({ type: \"ADD_WORD\", word });\r\n      dispatchVote({ type: \"INCREMENT\", word });\r\n    });\r\n\r\n    getWords().then(words => {\r\n      const votes = {};\r\n      const allWords = words.map(w => {\r\n        votes[w.word] = w.vote;\r\n        return w.word;\r\n      });\r\n      dispatchWord({ type: \"init\", words: allWords });\r\n      dispatchVote({ type: \"init\", newState: votes });\r\n    });\r\n    return () => socket.close();\r\n  }, []);\r\n\r\n  return (\r\n    <WordContext.Provider value={{ wordz, socket, votez }}>\r\n      {children}\r\n    </WordContext.Provider>\r\n  );\r\n};\r\n\r\nexport default WordProvider;\r\n","import React, { useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nconst D3 = ({ data }) => {\r\n  useEffect(() => {\r\n    if (Object.keys(data).length === 0) return;\r\n    console.log(data);\r\n    var width = 400,\r\n      height = 400;\r\n\r\n    var x = d3\r\n      .scaleLinear()\r\n      .domain([0, 20])\r\n      .range([30, 55]);\r\n    var nodes = Object.keys(data).map(d => {\r\n      return { name: d, radius: data[d] };\r\n    });\r\n\r\n    var simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"charge\", d3.forceManyBody().strength(100))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .force(\r\n        \"collision\",\r\n        d3.forceCollide().radius(function(d) {\r\n          return d.radius;\r\n        })\r\n      )\r\n      .on(\"tick\", ticked);\r\n    function dragsubject() {\r\n      return simulation.find(d3.event.x, d3.event.y);\r\n    }\r\n    d3.select(\"svg\").call(\r\n      d3\r\n        .drag()\r\n        .subject(dragsubject)\r\n        .on(\"start\", dragstarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragended)\r\n    );\r\n    var u = d3\r\n      .select(\"svg\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes);\r\n\r\n    var n = u.enter();\r\n    var c = n.append(\"circle\").attr(\"r\", function(d) {\r\n      return d.radius;\r\n    });\r\n\r\n    var t = n\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .style(\"font-size\", \"1rem\")\r\n      .style(\"fill\", \"red\")\r\n      .text(d => d.name);\r\n\r\n    function ticked() {\r\n      c.attr(\"cx\", function(d) {\r\n        return d.x;\r\n      }).attr(\"cy\", function(d) {\r\n        return d.y;\r\n      });\r\n\r\n      t.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\r\n    }\r\n\r\n    function dragstarted() {\r\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n      d3.event.subject.fx = d3.event.subject.x;\r\n      d3.event.subject.fy = d3.event.subject.y;\r\n    }\r\n\r\n    function dragged() {\r\n      d3.event.subject.fx = d3.event.x;\r\n      d3.event.subject.fy = d3.event.y;\r\n    }\r\n\r\n    function dragended() {\r\n      if (!d3.event.active) simulation.alphaTarget(0);\r\n      d3.event.subject.fx = null;\r\n      d3.event.subject.fy = null;\r\n    }\r\n\r\n    return () => {\r\n      d3.select(\"svg\")\r\n        .selectAll(\"*\")\r\n        .remove();\r\n    };\r\n  }, [data]);\r\n  return <svg width=\"400\" height=\"400\" />;\r\n};\r\n\r\nexport default D3;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { WordContext } from \"./Context\";\r\nimport styled from \"styled-components\";\r\nimport D3 from \"./D3\";\r\n\r\nconst Colors = {\r\n  mood: \"#e159e1\",\r\n  object: \"#53e553\",\r\n  sensibility: \"#ffff82\"\r\n};\r\n\r\nconst Container = styled.div`\r\n  background: ${props => props.color};\r\n  height: 100%;\r\n`;\r\n\r\nconst CatContainer = styled.div`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  text-align: center;\r\n  padding: 0 3rem;\r\n`;\r\n\r\nconst CatButton = styled.div`\r\n  padding: 1rem;\r\n`;\r\nconst MoodS = styled(CatButton)`\r\n  background: ${Colors.mood};\r\n`;\r\n\r\nconst ObjectS = styled(CatButton)`\r\n  background: ${Colors.object};\r\n`;\r\nconst SenseS = styled(CatButton)`\r\n  background: ${Colors.sensibility};\r\n`;\r\n\r\nfunction App() {\r\n  const { wordz, socket, votez } = useContext(WordContext);\r\n  const [color, setColor] = useState(\"mood\");\r\n  const [word, setWord] = useState(\"\");\r\n\r\n  const addWord = e => {\r\n    e.preventDefault();\r\n    socket.emit(\"addword\", word);\r\n  };\r\n\r\n  const handleWord = e => {\r\n    setWord(e.target.value);\r\n  };\r\n\r\n  const voteWord = w => {\r\n    socket.emit(\"voteword\", w);\r\n  };\r\n\r\n  const changeColor = e => {\r\n    setColor(e.target.innerHTML);\r\n  };\r\n\r\n  return (\r\n    <Container color={Colors[color]}>\r\n      <D3 data={votez} />\r\n      <CatContainer>\r\n        <MoodS onClick={changeColor}>mood</MoodS>\r\n        <ObjectS onClick={changeColor}>object</ObjectS>\r\n        <SenseS onClick={changeColor}>sensibility</SenseS>\r\n      </CatContainer>\r\n      {wordz.map(w => (\r\n        <div key={w}>\r\n          {\" \"}\r\n          <div>\r\n            {w}-{votez[w]}\r\n          </div>{\" \"}\r\n          <button onClick={() => voteWord(w)}>+</button>\r\n        </div>\r\n      ))}\r\n      <form>\r\n        <input onChange={handleWord} />\r\n        <button type=\"submit\" onClick={addWord}>\r\n          ADD\r\n        </button>\r\n      </form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport WordProvider from \"./Context\";\r\n\r\nReactDOM.render(\r\n  <WordProvider>\r\n    <App />\r\n  </WordProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}