{"version":3,"sources":["Context.js","D3.js","App.js","serviceWorker.js","index.js"],"names":["server","WordContext","React","createContext","getWords","a","fetch","response","json","data","socket","io","path","voteReducer","state","action","type","word","vote","newState","wordReducer","words","WordProvider","children","useReducer","wordz","dispatchWord","votez","dispatchVote","useEffect","on","isNew","then","votes","allWords","map","w","close","Provider","value","D3","console","log","Object","keys","length","x","d3","domain","range","nodes","d","name","radius","force","strength","width","height","u","selectAll","enter","append","attr","merge","y","text","t","style","exit","remove","Colors","mood","object","sensibility","Container","styled","div","props","color","CatContainer","CatButton","MoodS","ObjectS","SenseS","App","useContext","useState","setColor","setWord","changeColor","e","target","innerHTML","onClick","key","emit","voteWord","onChange","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6fAGO,IAEHA,EAFSC,EAAcC,IAAMC,gBAGjCH,EAAS,2BACT,IAAMI,EAAQ,uCAAG,8BAAAC,EAAA,sEACQC,MAAM,GAAD,OAAIN,EAAJ,YADb,cACTO,EADS,gBAEIA,EAASC,OAFb,cAETC,EAFS,yBAGRA,GAHQ,2CAAH,qDAORC,EAASC,IAAGX,EAAQ,CAAEY,KAAM,eAE5BC,EAAc,SAACC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,YAAL,MAGMD,EADFE,KAAQA,EAFZ,EAEYA,KAAMC,EAFlB,EAEkBA,KAEhB,O,yVAAO,CAAP,GAAYJ,EAAZ,eAAoBG,EAAOC,IAC7B,IAAK,OACH,OAAOH,EAAOI,SAChB,QACE,OAAOL,IAIPM,EAAc,SAACN,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,OACH,OAAOD,EAAOM,MAChB,IAAK,WACH,MAAM,GAAN,mBAAWP,GAAX,CAAkBC,EAAOE,KAAKA,SAiCrBK,EA7BM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACPC,qBAAWJ,EAAa,IADjB,mBAC9BK,EAD8B,KACvBC,EADuB,OAEPF,qBAAWX,EAAa,IAFjB,mBAE9Bc,EAF8B,KAEvBC,EAFuB,KAsBrC,OAlBAC,qBAAU,WAeR,OAdAnB,EAAOoB,GAAG,cAAc,SAAAb,GAClBA,EAAKc,OAAOL,EAAa,CAAEV,KAAM,WAAYC,SACjDW,EAAa,CAAEZ,KAAM,YAAaC,YAGpCb,IAAW4B,MAAK,SAAAX,GACd,IAAMY,EAAQ,GACRC,EAAWb,EAAMc,KAAI,SAAAC,GAEzB,OADAH,EAAMG,EAAEnB,MAAQmB,EAAElB,KACXkB,EAAEnB,QAEXS,EAAa,CAAEV,KAAM,OAAQK,MAAOa,IACpCN,EAAa,CAAEZ,KAAM,OAAQG,SAAUc,OAElC,kBAAMvB,EAAO2B,WACnB,IAGD,kBAACpC,EAAYqC,SAAb,CAAsBC,MAAO,CAAEd,QAAOf,SAAQiB,UAC3CJ,I,cCaQiB,EA1EJ,SAAC,GAAc,IAAZ/B,EAAW,EAAXA,KAuEZ,OAtEAgC,QAAQC,IAAIjC,GACZoB,qBAAU,WACR,GAAiC,IAA7Bc,OAAOC,KAAKnC,GAAMoC,OAAtB,CACAJ,QAAQC,IAAI,KAAMjC,GAClB,IAGIqC,EAAIC,MAELC,OAAO,CAAC,EAAG,MACXC,MAAM,CAAC,GAAI,KACVC,EAAQP,OAAOC,KAAKnC,GAAM0B,KAAI,SAAAgB,GAChC,MAAO,CAAEC,KAAMD,EAAGE,OAAQP,EAAErC,EAAK0C,QAEnCV,QAAQC,IAAI,GAEKK,IACEG,GAChBI,MAAM,SAAUP,MAAmBQ,SAAS,IAC5CD,MAAM,SAAUP,IAAeS,IAAWC,MAC1CH,MACC,YACAP,MAAkBM,QAAO,SAASF,GAChC,OAAOA,EAAEE,WAGZvB,GAAG,QAEN,WACE,IAAI4B,EAAIX,IACE,OACPY,UAAU,UACVlD,KAAKyC,GAEAQ,EAAEE,QACRC,OAAO,UACNC,KAAK,KAAK,SAASX,GAClB,OAAOA,EAAEE,UAEVU,MAAML,GACNI,KAAK,MAAM,SAASX,GACnB,OAAOA,EAAEL,KAEVgB,KAAK,MAAM,SAASX,GACnB,OAAOA,EAAEa,KAEVC,MAAK,SAAAd,GAAC,OAAIA,EAAEC,QAEf,IAAIc,EAAInB,IACE,OACPY,UAAU,QACVlD,KAAKyC,GAEAgB,EAAEN,QACRC,OAAO,QACNE,MAAMG,GACNJ,KAAK,cAAe,UACpBA,KAAK,KAAK,SAAAX,GAAC,OAAIA,EAAEL,KACjBgB,KAAK,KAAK,SAAAX,GAAC,OAAIA,EAAEa,KACjBG,MAAM,YAAa,QACnBA,MAAM,OAAQ,OACdF,MAAK,SAAAd,GAAC,OAAIA,EAAEC,QAEfM,EAAEU,OAAOC,SACTH,EAAEE,OAAOC,YAEX,OAAO,WACL5B,QAAQC,IAAI,aAEb,CAACjC,IACG,yBAAK+C,MAAM,MAAMC,OAAO,S,qnBCpEjC,IAAMa,EAAS,CACbC,KAAM,UACNC,OAAQ,UACRC,YAAa,WAGTC,EAAYC,IAAOC,IAAV,KACC,SAAAC,GAAK,OAAIA,EAAMC,SAIzBC,EAAeJ,IAAOC,IAAV,KAOZI,EAAYL,IAAOC,IAAV,KAGTK,EAAQN,YAAOK,EAAPL,CAAH,IACKL,EAAOC,MAGjBW,EAAUP,YAAOK,EAAPL,CAAH,IACGL,EAAOE,QAEjBW,EAASR,YAAOK,EAAPL,CAAH,IACIL,EAAOG,aAoDRW,MAjDf,WAAgB,IAAD,EACoBC,qBAAWpF,GAApCwB,EADK,EACLA,MAAOf,EADF,EACEA,OAAQiB,EADV,EACUA,MADV,EAEa2D,mBAAS,QAFtB,mBAENR,EAFM,KAECS,EAFD,OAGWD,mBAAS,IAHpB,mBAGNrE,EAHM,KAGAuE,EAHA,KAkBPC,EAAc,SAAAC,GAClBH,EAASG,EAAEC,OAAOC,YAGpB,OACE,kBAAClB,EAAD,CAAWI,MAAOR,EAAOQ,IACvB,kBAAC,EAAD,CAAIrE,KAAMkB,IACV,kBAACoD,EAAD,KACE,kBAACE,EAAD,CAAOY,QAASJ,GAAhB,QACA,kBAACP,EAAD,CAASW,QAASJ,GAAlB,UACA,kBAACN,EAAD,CAAQU,QAASJ,GAAjB,gBAEDhE,EAAMU,KAAI,SAAAC,GAAC,OACV,yBAAK0D,IAAK1D,GACP,IACD,6BACGA,EADH,IACOT,EAAMS,IACN,IACP,4BAAQyD,QAAS,kBAtBR,SAAAzD,GACf1B,EAAOqF,KAAK,WAAY3D,GAqBK4D,CAAS5D,KAAhC,SAGJ,8BACE,2BAAO6D,SA9BM,SAAAP,GACjBF,EAAQE,EAAEC,OAAOpD,UA8Bb,4BAAQvB,KAAK,SAAS6E,QApCZ,SAAAH,GACdA,EAAEQ,iBACFxF,EAAOqF,KAAK,UAAW9E,KAkCnB,U,MClEYkF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9E,MAAK,SAAA+E,GACjCA,EAAaC,kB","file":"static/js/main.84e5781a.chunk.js","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nexport const WordContext = React.createContext();\r\n\r\nlet server = \"http://localhost:4400\";\r\nserver = \"https://eng.med--lab.org\";\r\nconst getWords = async () => {\r\n  const response = await fetch(`${server}/words/`);\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\n// const socket = io(server);\r\nconst socket = io(server, { path: \"/socket.io\" });\r\n\r\nconst voteReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      const {\r\n        word: { word, vote }\r\n      } = action;\r\n      return { ...state, [word]: vote };\r\n    case \"init\":\r\n      return action.newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst wordReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"init\":\r\n      return action.words;\r\n    case \"ADD_WORD\":\r\n      return [...state, action.word.word];\r\n  }\r\n};\r\n\r\nconst WordProvider = ({ children }) => {\r\n  const [wordz, dispatchWord] = useReducer(wordReducer, []);\r\n  const [votez, dispatchVote] = useReducer(voteReducer, {});\r\n\r\n  useEffect(() => {\r\n    socket.on(\"updateword\", word => {\r\n      if (word.isNew) dispatchWord({ type: \"ADD_WORD\", word });\r\n      dispatchVote({ type: \"INCREMENT\", word });\r\n    });\r\n\r\n    getWords().then(words => {\r\n      const votes = {};\r\n      const allWords = words.map(w => {\r\n        votes[w.word] = w.vote;\r\n        return w.word;\r\n      });\r\n      dispatchWord({ type: \"init\", words: allWords });\r\n      dispatchVote({ type: \"init\", newState: votes });\r\n    });\r\n    return () => socket.close();\r\n  }, []);\r\n\r\n  return (\r\n    <WordContext.Provider value={{ wordz, socket, votez }}>\r\n      {children}\r\n    </WordContext.Provider>\r\n  );\r\n};\r\n\r\nexport default WordProvider;\r\n","import React, { useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nconst D3 = ({ data }) => {\r\n  console.log(data);\r\n  useEffect(() => {\r\n    if (Object.keys(data).length === 0) return;\r\n    console.log(\"hi\", data);\r\n    var width = 400,\r\n      height = 400;\r\n\r\n    var x = d3\r\n      .scaleLinear()\r\n      .domain([0, 200])\r\n      .range([30, 55]);\r\n    var nodes = Object.keys(data).map(d => {\r\n      return { name: d, radius: x(data[d]) };\r\n    });\r\n    console.log(1);\r\n\r\n    var simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"charge\", d3.forceManyBody().strength(5))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .force(\r\n        \"collision\",\r\n        d3.forceCollide().radius(function(d) {\r\n          return d.radius;\r\n        })\r\n      )\r\n      .on(\"tick\", ticked);\r\n\r\n    function ticked() {\r\n      var u = d3\r\n        .select(\"svg\")\r\n        .selectAll(\"circle\")\r\n        .data(nodes);\r\n\r\n      var n = u.enter();\r\n      n.append(\"circle\")\r\n        .attr(\"r\", function(d) {\r\n          return d.radius;\r\n        })\r\n        .merge(u)\r\n        .attr(\"cx\", function(d) {\r\n          return d.x;\r\n        })\r\n        .attr(\"cy\", function(d) {\r\n          return d.y;\r\n        })\r\n        .text(d => d.name);\r\n\r\n      var t = d3\r\n        .select(\"svg\")\r\n        .selectAll(\"text\")\r\n        .data(nodes);\r\n\r\n      var m = t.enter();\r\n      m.append(\"text\")\r\n        .merge(t)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"x\", d => d.x)\r\n        .attr(\"y\", d => d.y)\r\n        .style(\"font-size\", \"1rem\")\r\n        .style(\"fill\", \"red\")\r\n        .text(d => d.name);\r\n\r\n      u.exit().remove();\r\n      t.exit().remove();\r\n    }\r\n    return () => {\r\n      console.log(\"clean\");\r\n    };\r\n  }, [data]);\r\n  return <svg width=\"400\" height=\"400\" />;\r\n};\r\n\r\nexport default D3;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { WordContext } from \"./Context\";\r\nimport styled from \"styled-components\";\r\nimport D3 from \"./D3\";\r\n\r\nconst Colors = {\r\n  mood: \"#e159e1\",\r\n  object: \"#53e553\",\r\n  sensibility: \"#ffff82\"\r\n};\r\n\r\nconst Container = styled.div`\r\n  background: ${props => props.color};\r\n  height: 100%;\r\n`;\r\n\r\nconst CatContainer = styled.div`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  text-align: center;\r\n  padding: 0 3rem;\r\n`;\r\n\r\nconst CatButton = styled.div`\r\n  padding: 1rem;\r\n`;\r\nconst MoodS = styled(CatButton)`\r\n  background: ${Colors.mood};\r\n`;\r\n\r\nconst ObjectS = styled(CatButton)`\r\n  background: ${Colors.object};\r\n`;\r\nconst SenseS = styled(CatButton)`\r\n  background: ${Colors.sensibility};\r\n`;\r\n\r\nfunction App() {\r\n  const { wordz, socket, votez } = useContext(WordContext);\r\n  const [color, setColor] = useState(\"mood\");\r\n  const [word, setWord] = useState(\"\");\r\n\r\n  const addWord = e => {\r\n    e.preventDefault();\r\n    socket.emit(\"addword\", word);\r\n  };\r\n\r\n  const handleWord = e => {\r\n    setWord(e.target.value);\r\n  };\r\n\r\n  const voteWord = w => {\r\n    socket.emit(\"voteword\", w);\r\n  };\r\n\r\n  const changeColor = e => {\r\n    setColor(e.target.innerHTML);\r\n  };\r\n\r\n  return (\r\n    <Container color={Colors[color]}>\r\n      <D3 data={votez} />\r\n      <CatContainer>\r\n        <MoodS onClick={changeColor}>mood</MoodS>\r\n        <ObjectS onClick={changeColor}>object</ObjectS>\r\n        <SenseS onClick={changeColor}>sensibility</SenseS>\r\n      </CatContainer>\r\n      {wordz.map(w => (\r\n        <div key={w}>\r\n          {\" \"}\r\n          <div>\r\n            {w}-{votez[w]}\r\n          </div>{\" \"}\r\n          <button onClick={() => voteWord(w)}>+</button>\r\n        </div>\r\n      ))}\r\n      <form>\r\n        <input onChange={handleWord} />\r\n        <button type=\"submit\" onClick={addWord}>\r\n          ADD\r\n        </button>\r\n      </form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport WordProvider from \"./Context\";\r\n\r\nReactDOM.render(\r\n  <WordProvider>\r\n    <App />\r\n  </WordProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}